---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(here) # easier paths, here() function starts in the folder of the RStudio project
library(tidyverse)
library(brms)
library(tidybayes)
library(ggtern)
library(kableExtra)

# get custom functions
source(here("scripts/functions.R"))
```

```{r}
dat <- readRDS(here("data/clean/dat_absent_before.rds"))
```

```{r}
dat_sec <- dat %>%
  mutate(total_obs_sec = circling_time_sec + 
           investigating_time_sec + 
           passing_time_sec + 
           feeding_time_sec)

dat_sec <- dat_sec %>% 
  mutate(log_n_frame_total = log(n_frame_total),
         log_depth = log(depth))
```

```{r}
dat_sec %>% 
  group_by(size_class, treatment, year) %>% 
    summarise(total_obs_sec_mean = mean(total_obs_sec, na.rm = T),
            sd = sd(total_obs_sec, na.rm = T),
            n = n(),
            se = ifelse(n >=3, sd / sqrt(n), NA)) %>% 
    ggplot()+
  # geom_point(data = dat_sec,
  #            aes(x = treatment, 
  #                   y = log(total_obs_sec), 
  #                   col = factor(treatment)),
  #            position = position_jitter(), alpha = .1)+
  geom_errorbar(aes(x = treatment, 
                    ymin = log(total_obs_sec_mean - se), 
                    ymax = log(total_obs_sec_mean + se), 
                    col = factor(treatment),
                    width = .4))+
  geom_point(aes(x = treatment, 
                    y = log(total_obs_sec_mean), 
                    col = factor(treatment)))+
  
  facet_grid(year ~size_class , scales = "free")+
  theme_clean()
```

```{r}
test <- brm(total_obs_sec ~ factor(year)*treatment*size_class + 
                  s(log_n_frame_total) + 
                  habitat + 
                  s(log_depth) +
                  (1|video),
            data = dat_sec  %>% 
             filter(size_class != ">100"),
            family = Gamma(link = "log"),
                       prior=c(prior(normal(0,2),class="Intercept"),
                  prior(normal(0,2),class="b"),
                  prior(gamma(0.01,0.01),class="shape")),
           iter = 4000,
           warmup = 2000,
           chains = 4,
           cores = 4,
           seed = 123,
           file_refit = "on_change",
           threads = threading(2, static = T),
           backend = "cmdstanr"
)
  
summary(test)
pp_check(test, ndraws = 100)
bayes_R2(test)#0.5
library(performance)
model_performance(test)
r2(test)

pred <- posterior_predict(test)
bayesplot::ppc_dens_overlay(y = log1p(dat_sec  %>% 
             filter(size_class != ">100") %>% 
               pull(total_obs_sec)), 
                            yrep = log1p(pred[1:10,]))


performance_rmse()
```
