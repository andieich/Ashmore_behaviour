---
title: "Model behaviour time shark"
format: html
editor: visual
---

### Libraries

```{r}
library(here) # easier paths, here() function starts in the folder of the RStudio project
library(tidyverse)
library(brms)
library(tidybayes)
library(ggtern)
library(kableExtra)

# get custom functions
source(here("scripts/functions.R"))
```

### Get data

```{r}
dat_frac_shark <- readRDS(here("data/clean/dat_before_after.rds")) %>% 
  filter(treatment == "after") %>% 
  select(-treatment)
```

-   Combine circling and investigating, calculate relative time of behavior types,

-   Make long and wide data frame

```{r}
dat_frac_sharkW <- dat_frac_shark %>%
  mutate(investigating_circling_time_sec = circling_time_sec + investigating_time_sec,
         total_obs_sec = investigating_circling_time_sec + passing_time_sec + feeding_time_sec,
         investigating_circling_frac = investigating_circling_time_sec/total_obs_sec,
         feeding_frac = feeding_time_sec/total_obs_sec,
         passing_frac = passing_time_sec/total_obs_sec)
         

dat_frac_sharkL <- dat_frac_sharkW %>%
  pivot_longer(c(investigating_circling_frac, 
                 feeding_frac, 
                 passing_frac), 
               names_to = "type", 
               values_to = "perc")
```

### Raw data

```{r}
dat_frac_sharkL %>% 
  ggplot(aes(x = log(total_time_shark_present_frame), y = perc, col = type))+
  geom_point()+
  geom_smooth(method = "lm")+
  facet_grid(size_class~year)+
  theme_clean()
```

### Model Small&Medium

Prepare data

```{r}
dat_model_frac_shark <- dat_frac_sharkW %>% 
mutate(frac_circ_invT = transformD(investigating_circling_frac),
         frac_passingT = transformD(passing_frac),
         frac_feedingT = transformD(feeding_frac),
         
         frac_tot = frac_circ_invT + frac_passingT + frac_feedingT,
         
         frac_circ_invT = frac_circ_invT/frac_tot,
         frac_passingT = frac_passingT/frac_tot,
         frac_feedingT = frac_feedingT/frac_tot
         )

```

```{r}
dat_model_frac_shark <- dat_model_frac_shark %>% 
  mutate(log_time_shark = log(total_time_shark_present_frame))
```

```{r}
dat_model_frac_shark_SM <- dat_model_frac_shark %>% 
  filter(size_class != ">100") %>% 
  droplevels()

dat_model_frac_shark_L <- dat_model_frac_shark %>% 
  filter(size_class == ">100") %>% 
  droplevels()
```

```{r}
fit_frac_shark_SM <- brm(bf(cbind(frac_circ_invT, frac_passingT, frac_feedingT) ~ 
                factor(year)*size_class + 
                  s(log_time_shark) +
                  (1|video),
                phi ~ factor(year)*size_class),
           data = dat_model_frac_shark_SM,
           family =  dirichlet(),
           control = list(max_treedepth = 12, 
                          adapt_delta = 0.98),
           iter = 4000,
           warmup = 2000,
           chains = 4,
           cores = 4,
           seed = 123,
           file_refit = "on_change",
           threads = threading(2, static = T),
           file = here("models/fit_frac_shark_SM"),
           backend = "cmdstanr")
```

```{r}
summary(fit_frac_shark_SM)#ok 10 divergent transitions
#plot(fit_frac_shark_SM) # ok
```

```{r}
#dirichlet_r2(fit_frac_shark_SM)# takes some time
```

frac_circ_invT 0.14439165\
frac_passingT 0.16824254\
frac_feedingT 0.05611033

### Predict

Get predicted values

```{r}
epred_frac_shark_SM <-  epred_draws(
  fit_frac_shark_SM,
  newdata = expand_grid(
    year = dat_model_frac_shark_SM$year %>% unique(),
    size_class = c("<50", "50-100"),
    log_time_shark = seq(min(dat_model_frac_shark_SM$log_time_shark),
                            max(dat_model_frac_shark_SM$log_time_shark),
                            length = 100)
  ),
  re_formula = NA
)

epred_frac_shark_SM_S <- epred_frac_shark_SM %>% 
  group_by(.category, log_time_shark, size_class) %>% 
  summarise(median = median(.epred),
            l_66 = quantile(.epred, probs = (1-0.66)/2),
            u_66 = quantile(.epred, probs = 1 - (1-0.66)/2),
            l_89 = quantile(.epred, probs = (1-0.89)/2),
            u_89 = quantile(.epred, probs = 1-(1-0.89)/2),
            l95 = quantile(.epred, 0.025, na.rm = T),
            u95 = quantile(.epred, 0.975, na.rm = T),
      )

epred_frac_shark_SM_S %>%
  ggplot(aes(x = log_time_shark))+
  geom_hline(yintercept = 0, linetype = "11", col = "grey")+
  geom_ribbon(aes(ymin = l_89*100, ymax = u_89*100, fill = .category), alpha = .3)+
  geom_line(aes(y = median*100, col = .category), linewidth = 1, show.legend = F)+
   geom_point(data = dat_frac_sharkL %>% 
                filter(size_class != ">100") %>% 
               mutate(.category = recode(type, 
                                    "feeding_frac"= "frac_feedingT",
                                    "investigating_circling_frac"= "frac_circ_invT",
                                    "passing_frac"= "frac_passingT"),
                      log_time_shark = log(total_time_shark_present_frame)),
             aes(y = perc*100, col = .category))+
  facet_wrap(size_class~.category)+
  theme_clean()
```

Not much

### Model Large

smooth not possible with covariates, too few obs, including random factor video not possible, inclusion of year not possible

```{r}
fit_frac_shark_L <- brm(bf(cbind(frac_circ_invT, frac_passingT, frac_feedingT) ~ 
                  log_time_shark,
                phi ~ factor(year)),
           data = dat_model_frac_shark_L,
           family =  dirichlet(),
           control = list(max_treedepth = 12, 
                          adapt_delta = 0.98),
           iter = 4000,
           warmup = 2000,
           chains = 4,
           cores = 4,
           seed = 123,
           file_refit = "on_change",
           threads = threading(2, static = T),
           file = here("models/fit_frac_shark_L"),
           backend = "cmdstanr")
```

```{r}
summary(fit_frac_shark_L)#ok 
#plot(fit_frac_shark_L) # ok
```

```{r}
#dirichlet_r2(fit_frac_shark_L)# takes some time
```

frac_circ_invT 0.01811564

frac_passingT 0.01991542

frac_feedingT 0.03335447

```{r}
epred_frac_shark_L <-  epred_draws(
  fit_frac_shark_L,
  newdata = expand_grid(
    year = dat_model_frac_shark_L$year %>% unique(),
    log_time_shark = seq(min(dat_model_frac_shark_L$log_time_shark),
                            max(dat_model_frac_shark_L$log_time_shark),
                            length = 100)
  ),
  re_formula = NA
)

epred_frac_shark_L_S <- epred_frac_shark_L %>% 
  group_by(.category, log_time_shark) %>% 
  summarise(median = median(.epred),
            l_66 = quantile(.epred, probs = (1-0.66)/2),
            u_66 = quantile(.epred, probs = 1 - (1-0.66)/2),
            l_89 = quantile(.epred, probs = (1-0.89)/2),
            u_89 = quantile(.epred, probs = 1-(1-0.89)/2),
            l95 = quantile(.epred, 0.025, na.rm = T),
            u95 = quantile(.epred, 0.975, na.rm = T),
      )

epred_frac_shark_L_S %>%
  ggplot(aes(x = log_time_shark))+
  geom_hline(yintercept = 0, linetype = "11", col = "grey")+
  geom_ribbon(aes(ymin = l_89*100, ymax = u_89*100, fill = .category), alpha = .3)+
  geom_line(aes(y = median*100, col = .category), linewidth = 1, show.legend = F)+
   geom_point(data = dat_frac_sharkL %>% 
                filter(size_class == ">100") %>% 
               mutate(.category = recode(type, 
                                    "feeding_frac"= "frac_feedingT",
                                    "investigating_circling_frac"= "frac_circ_invT",
                                    "passing_frac"= "frac_passingT"),
                      log_time_shark = log(total_time_shark_present_frame)),
             aes(y = perc*100, col = .category))+
  facet_wrap(~.category)+
  theme_clean()
```

No real impact. Increase in feeding with shark time only due to one obs
